{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","padding","test","textAlign","position","bottom","li","listStyle","display","fontSize","right","borderBottom","borderTop","width","color","ay","textDecoration","curser","flexing","justifyContent","flexDirection","image","height","App","classes","useState","users","setUsers","repo","setRepo","getUsers","a","async","clientId","process","secret","reposCount","reposSort","console","log","fetch","profileResponse","json","Json","repoJson","AppBar","Toolbar","variant","Typography","Paper","className","mx","TextField","id","label","onChange","e","target","value","name","avatar_url","href","html_url","rel","src","alt","length","map","elem","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d761677.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { TextField } from '@material-ui/core';\n\nimport './App.css';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(0, 20, 0, 20),\n    '& > *': {\n      padding: theme.spacing(3, 2),\n      margin: theme.spacing(0, 20, 0, 20),\n    },\n  },\n  test: {\n    margin: theme.spacing(10, 10, 0, 10),\n    textAlign: \"center\",\n    position: \"relative\",\n    bottom: 107,\n  },\n  li: {\n    listStyle: \"none\",\n    display: \"block\",\n    fontSize: 15.17,\n    position: \"relative\",\n    right: 22.5,\n    borderBottom: \"1px solid black\",\n    borderTop: \"1px solid black\",\n    width: 200,\n    padding: theme.spacing(1.5, 0),\n    margin: theme.spacing(5.5, 0),\n    '&:hover': {\n      color: \"purple\"\n    }\n  },\n  ay: {\n    textDecoration: \"none\",\n    curser: \"pointer\",\n    color: \"inherit\",\n  },\n  flexing: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    margin: theme.spacing(-4, 0),\n  },\n  image: {\n    height: 350,\n    width: 370\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [users, setUsers] = useState({})\n  const [repo, setRepo] = useState({})\n\n  const handleChange = (e) => {\n    getUsers(e.target.value)\n  }\n  const getUsers = async (users) => {\n    const clientId = process.env.REACT_APP_API_KEY\n    const secret = process.env.REACT_APP_SECRET_KEY\n    const reposCount = 5\n    const reposSort = 'asc'\n    console.log(\"before the fetchcall\")\n    const profileResponse = await fetch(`https://api.github.com/users/${users}?client_id=${clientId}&client_secret=${secret}`)\n    console.log(\"after the fetch call?\")\n    const Json = await profileResponse.json()\n    const repo = await fetch(`https://api.github.com/users/${users}/repos?per_page=${reposCount}&sort=${reposSort}&client_id=${clientId}&client_secret=${secret}`)\n    const repoJson = await repo.json()\n\n    setUsers({\n      Json,\n    })\n    setRepo({\n      repoJson\n    })\n  }\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            Github Finder\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Paper className={classes.root} mx=\"auto\">\n        <Typography variant=\"h3\">\n          Search Github Users\n      </Typography>\n        <Typography variant=\"h5\">\n          Enter a user username to fetch a user profile and repos\n      </Typography>\n        <TextField id=\"full-width-text-field\" label=\"Github Username\" width={300} onChange={handleChange} name=\"users\" />\n      </Paper>\n      <br />\n      <br />\n      <br />\n      <div className={classes.flexing}>\n        {users && users.Json\n          ? <div className={classes.test}>\n            <h3>{users.Json.name}</h3>\n            {\n              users.Json.avatar_url\n                ? <div>\n                  <a href={users.Json.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img src={users.Json.avatar_url} alt={users.Json.name} className={classes.image} />\n                  </a>\n                </div>\n                : \"\"\n            }\n          </div>\n          : \"\"\n        }\n        {\n          repo.repoJson && repo.repoJson.length > 0\n            ? <div className={classes.test}>\n              <h4>Latest Repository</h4>\n              {repo.repoJson.map((elem, i) => {\n                return (<ul>\n                  <a href={elem.html_url} target=\"_blank\" rel=\"noopener noreferrer\" className={classes.ay}><li key={i} className={classes.li}>{elem.name}</li></a>\n                </ul>)\n              })}</div>\n            : \"\"\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}